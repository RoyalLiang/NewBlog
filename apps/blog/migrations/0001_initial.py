# Generated by Django 3.2 on 2022-02-18 08:26

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BlogModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(db_index=True, max_length=50, unique=True)),
                ('cover', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('author', models.CharField(db_index=True, max_length=30)),
                ('summary', models.CharField(blank=True, max_length=500, null=True)),
                ('content', models.TextField()),
                ('status', models.SmallIntegerField(default=-1)),
                ('read', models.IntegerField(default=0)),
                ('comment', models.IntegerField(default=0)),
                ('like', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Blog',
                'verbose_name_plural': 'Blog',
                'db_table': 'blog',
            },
        ),
        migrations.CreateModel(
            name='LabelModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(db_index=True, max_length=30)),
                ('cover', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('desc', models.CharField(blank=True, max_length=300, null=True)),
                ('cat', models.SmallIntegerField(choices=[(1, '标签'), (2, '类别')], db_index=True)),
                ('status', models.SmallIntegerField(choices=[(-1, '已删除'), (0, '草稿'), (1, '使用中')], db_index=True, default=0)),
            ],
            options={
                'verbose_name': '分类管理',
                'verbose_name_plural': '分类管理',
                'db_table': 'label',
            },
        ),
        migrations.CreateModel(
            name='BlogRefTagModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True, null=True)),
                ('blog', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='blog.blogmodel')),
                ('tag', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='blog.labelmodel')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tag',
                'db_table': 'blog_ref_tag',
            },
        ),
        migrations.CreateModel(
            name='BlogRefCategoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True, null=True)),
                ('blog', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='blog.blogmodel')),
                ('category', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='blog.labelmodel')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Category',
                'db_table': 'blog_ref_category',
            },
        ),
        migrations.AddField(
            model_name='blogmodel',
            name='categories',
            field=models.ManyToManyField(related_name='cat_blog', through='blog.BlogRefCategoryModel', to='blog.LabelModel'),
        ),
        migrations.AddField(
            model_name='blogmodel',
            name='tags',
            field=models.ManyToManyField(related_name='tag_blog', through='blog.BlogRefTagModel', to='blog.LabelModel'),
        ),
    ]
